【分享主题】Java8特性介绍--Stream
【分享人】陈星桥
【内容】主要介绍JAVA8特性Stream相关语法，并通过实例快速了解Stream是什么，能做什么。
【时间地点】2017-06-14 18:00 301大会议室

大纲：
1. 实例介绍，平时开发时的场景，引入Stream
2. 介绍Stream的相关知识
3. 常用使用场景实例介绍
  . 流的创建
  . 转换过滤
  . 聚合输出
4. 串行流和并行流
5. 性能相关话题--或者lamda函数介绍
6. 介绍Stream相关概念
   什么是Stream--
      Stream是Java 8 提供的高效操作集合类（Collection）数据的API。
	 
   为什么需要Stream
   
   Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。
   它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的
   Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），
   或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。
   同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。
   通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 
   中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。


9. 性能问题
有些细心的同学可能会有这样的疑问：在对于一个Stream进行多次转换操作，每次都对Stream的每个元素进行转换，而且是执行多次，这样时间复杂度就是一个for循环里把所有操作都做掉的N（转换的次数）倍啊。
其实不是这样的，转换操作都是lazy的，多个转换操作只会在汇聚操作（见下节）的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，
在汇聚操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。